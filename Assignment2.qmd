---
title: "Assignment 2"
layout: page
---

# 1.Murrell.R

Change pch change the shape of the data points.

```{r}
plot(pressure, pch=16)
text(150, 600, 
     "Pressure (mm Hg)\nversus\nTemperature (Celsius)")

par(mfrow=c(3, 2))
new_x <- c(0.5, 2, 4, 8, 12, 16)
new_y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
new_y2 <- c(4, .8, .5, .45, .4, .3)

```

## Including Plots
Change cex change size of the points, bg, color of the points, fg, color of the axis

```{r}

par(las=1, mar=c(4, 4, 2, 4), cex=0.8) 
plot.new()
plot.window(range(new_x), c(0, 6))
lines(new_x, new_y1)
lines(new_x, new_y2)
points(new_x, new_y1, pch=17, cex=6)  # Increased point size with a different shape
points(new_x, new_y2, pch=19, bg="green", cex=3)  # Different background color and size
par(col="purple", fg="gray40", col.axis="darkgreen")
axis(1, at=seq(0, 16, 4)) # X-axis, min, max, gap
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
box(bty="o")  # Changed box type
mtext("Time (s)", side=1, line=2, cex=1)
mtext("Frequency", side=2, line=2, las=0, cex=1)
mtext("Velocity", side=4, line=2, las=0, cex=1)
text(6, 4, "Sample Label")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")

```

## Histogram


```{r}
Z <- rnorm(50)
# Ensure no Z exceeds [-4, 4]
Z[Z < -4 | Z > 4] <- NA # Selection/set range
x_vals <- seq(-4, 4, .1) 
density_vals <- dnorm(x_vals)
par(mar=c(4.5, 4.1, 3.1, 0))
hist(Z, breaks=seq(-4, 4), ylim=c(0, 0.5), 
     col="cyan", freq=FALSE)
lines(x_vals, dnorm(x_vals), lwd=2)

```

## Barplot


1. par(mar=c(2, 3.1, 2, 2.1)) Margin of the plot: Bottom, Left, Top, Right

2. col=gray(0.1 + seq(1, 9, 2)/11) Shade of grey from 1/11, 3/11, 5/11, 7/11, 9/11

3. names=rep(““, 4)) –> Change x-axis to be empty –> Use mtext to create customized label

4. text(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2 midpts, each=5 # Position of each text from the bars

text(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2 –> Calculate the culmulative sums of death

```{r}
par(mar=c(2, 3.1, 2, 2.1))
mid_points <- barplot(VADeaths, 
                     col=gray(0.1 + seq(1, 9, 2)/11), 
                     names=rep("", 4))
mtext(sub(" ", "\n", colnames(VADeaths)),
      at=mid_points, side=1, line=0.5, cex=0.5)
text(rep(mid_points, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,
     VADeaths, 
     col=rep(c("white", "black"), times=3:2), 
     cex=0.8)

par(mar=c(5.1, 4.1, 4.1, 2.1))

```

## Boxplot
Boxwex = Boxwidth at= Change position Subset = Subset of data

boxwex = 0.25, at = 1:3 - 0.2, subset= supp == “VC”, col=“white”, xlab=““, ylab=”tooth length”, ylim=c(0,35))

```{r}
par(mar=c(3, 4.1, 2, 0))
boxplot(len ~ dose, data = ToothGrowth,
        boxwex = 0.3, at = 1:3 - 0.25,
        subset = supp == "VC", col = "lightblue",
        xlab = "",
        ylab = "Tooth Length", ylim = c(0, 35))
mtext("Vitamin C Dose (mg)", side = 1, line = 2.5, cex = 0.8)
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
        boxwex = 0.3, at = 1:3 + 0.25,
        subset = supp == "OJ", col = "lightgreen")
legend(1.5, 9, c("Ascorbic Acid", "Orange Juice"), 
       fill = c("lightblue", "lightgreen"), 
       bty = "n")

par(mar=c(5.1, 4.1, 4.1, 2.1))

```

## Perspective


1.z <- outer(x, y, f) Compute the value of function of x,y and store the value as z And adjusted all missing value of z -1

2.f <- function(x,y) { r <- sqrt(x2+y2); 10 * sin(r)/r } First derived the distance between x and y by r Then calculate a function of x y by the fraction 10 * sin(r)/r

3. persp(x, y, z, theta = 30, phi = 30, expand = 0.5) Theta = rotated angle of z plane Phi = rotated angle of xy plane Expand = Shrink/ Enlarge the width of the image

```{r}
x_vals <- seq(-12, 12, length = 30)
y_vals <- x_vals
f <- function(x, y) { r <- sqrt(x^2 + y^2); 12 * sin(r) / r }
z_vals <- outer(x_vals, y_vals, f)
z_vals[is.na(z_vals)] <- 1
# Adjusting for z-axis label visibility
par(mar = c(0, 0.5, 0, 0), lwd = 0.5)
persp(x_vals, y_vals, z_vals, theta = 35, phi = 25, 
      expand = 0.5)

```


## Pie Chart

Can use other type of color pie(pie.sales, col = rainbow(6)) pie(pie.sales, col = heat.colors(6))
```{r}
par(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.6)
pie_sales <- c(0.15, 0.25, 0.2, 0.18, 0.05, 0.17)
names(pie_sales) <- c("Strawberry", "Lemon", "Apple", "Chocolate", "Other", "Vanilla")
pie(pie_sales, col = gray(seq(0.2, 1.0, length=6)))


```

# 2.Using Happy Index

```{r}
library(readxl)
library(tidyverse)
hpi_data <- read_excel("HPI_2024_public_dataset.xlsx", sheet = "All Data", skip = 1)
colnames(hpi_data) <- gsub(" ", "_", colnames(hpi_data))
colnames(hpi_data) <- tolower(colnames(hpi_data))
attach(hpi_data)
region <- as.factor(continent)
continent_labels <- c("1" = "Latin America", "2" = "North America & Oceania", "3" = "Western Europe", "4" = "Middle East & North Africa", "5" = "Sub-Saharan Africa", "6" = "South Asia", "7" = "Eastern Europe & Central Asia", "8" = "East Asia")

```

```{r}
## Test the plot(), points(), lines()
hpi_data_subset <- hpi_data %>% filter(continent == "2")
attach(hpi_data_subset)
countries_list <- unique(country)
par(las = 1, mar = c(6, 6, 4, 14), cex = 0.8, mgp = c(4, 1, 0))  # Adjust the gap between axis
plot(year[country == countries_list[1]], gdp_per_capita[country == countries_list[1]], type = "n", xlab = "", ylab = "GDP per Capita", xlim = c(2006, 2021), ylim = range(gdp_per_capita), xaxt = "n", yaxt = "n")  # Remove default axis
colors <- rainbow(length(countries_list))

for (i in seq_along(countries_list)) {
  country_data <- hpi_data_subset[country == countries_list[i], ]
  lines(country_data$year, country_data$gdp_per_capita, col = colors[i], lwd = 2)
  points(country_data$year, country_data$gdp_per_capita, col = colors[i], pch = 2, bg = "yellow")
  axis(1, at = seq(2006, 2021, 3))
  axis(2, at = seq(40000, 60000, 5000))
  box(bty = "u")
  mtext("Year", side = 1, line = 2, cex = 0.8)
}
legend("right", legend = countries_list, col = colors, lty = 1, pch = 2, xpd = TRUE, inset = c(-0.55, 0))

```


## Histogram


```{r}
hpi_data_2021 <- hpi_data %>% filter(year == "2021", !is.na(lifeexp))
attach(hpi_data_2021)
mean <- mean(lifeexp)
sd <- sd(lifeexp)
x <- seq(min(lifeexp), max(lifeexp), .1)
dn <- dnorm(x, mean = mean, sd = sd) # Because data is not normally distributed, what need to input the mean and sd to get the line
hist(lifeexp, breaks=seq(50, 90), ylim=c(0, 0.08), 
     col="steelblue", freq=FALSE, main = "Life Expectancy in 2021", xlab="Life Expectancy")
lines(x, dn, lwd=2)
par(mar=c(5.1, 4.1, 4.1, 2.1))
```

## Boxplot

```{r}
continent_names2 <- c("Latin\nAmerica", "N America\n& Oceania", "Western\nEurope", "MiddleEast\n& N. Africa", "Sub-Saharan\nAfrica", "South\nAsia", "Eastern Europe\n& Central Asia", "East\nAsia")

par(mar = c(5, 5, 4, 2))
boxplot(lifeexp ~ continent, data = hpi_data_2021,
        col = hcl.colors(length(unique(hpi_data_2021$continent)), palette = "Set3"), # See hcl.colors for more option
        xaxt = "n",
        xlab = "Continent",
        ylab = "Life Expectancy",
        main = "Distribution of Life Expectancy by Continent")
axis(1, at = 1:8, labels = continent_names2, cex.axis=0.6) 

```


## Pie Chart

```{r}
attach(hpi_data_2021)
gdp_mean <- mean(gdp_per_capita, na.rm=TRUE)
hpi_data_2021_above <- hpi_data_2021 %>%  filter(gdp_per_capita > gdp_mean)%>% group_by(continent) %>% summarise(country_count = n())
hpi_data_2021_above

hpi_data_2021_above$continent <- as.factor(hpi_data_2021_above$continent)
hpi_data_2021_above$continent_names <- c("1" = "Latin America", "2" = "N America & Oceania", "3" = "Western Europe", "4" = "Middle East & N. Africa", "7" = "Eastern Europe & Central Asia", "8" = "East Asia")
hpi_data_2021_above$percentage <- round((hpi_data_2021_above$country_count / sum(hpi_data_2021_above$country_count)) * 100, 1)
labels <- paste(hpi_data_2021_above$continent_names, " (", hpi_data_2021_above$percentage, "%)", sep = "")
par(mar = c(2, 2, 2, 2)) # Adjust margin to increase pie size
pie(hpi_data_2021_above$country_count, labels = labels, col = hcl.colors(n = nrow(hpi_data_2021_above), palette = "Set3"), 
    main = "Distribution of Countries by Continent\nwith Above-Average GDP per Capita in 2021")
```

## 3D Perspective Plot

```{r}
attach(hpi_data_2021)
x <- sort(unique(na.omit(lifeexp))) # Need to sort x and y so that they are in increasing order, and must be unique to generate f (the distance between x and y)
y <- sort(unique(na.omit(cov_adj_footprint)))
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
z <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2)))
par(mar=c(0, 0.5, 0, 0), lwd=0.5)
persp(x, y, z, theta = 50, phi = 30, 
      expand = 0.5)

```